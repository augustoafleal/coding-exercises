<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd">
	
	<named-query name="obterFilmesComNotaMaiorQue">
		<query> 
		
			select distinct f from Filme f
			join fetch f.atores 
			where f.nota > :nota
			
		</query>
	</named-query>
	
	<named-native-query name="obterMediaGeralDosFilmes" 
		result-set-mapping="NotaFilmeMap">
	
		<query>
		
			select avg(nota) as media from filmes
	
		</query>
	
	</named-native-query>
	<sql-result-set-mapping name="NotaFilmeMap">
		<constructor-result target-class="modelo.consulta.NotaFilme">
		
			<column name="media" class="java.lang.Double"/>
		
		</constructor-result>
	</sql-result-set-mapping>

	
</entity-mappings>

<!-- query é a consulta específica realizada -->
<!--DENTRO DA TAG QUERY TUDO ESTÁ EM JPQL
			1. Filme porque remete à entidade (classe e atributos da classe)
			e não ao nome da tabela
			2. O join fetch faz com que da pequisa do filme o sistema já
			pegue os nomesde todos os atores
			3. :nota remete ao parâmetro passado na consulta
			-->			
			
<!-- A classe NotaFilme cria a partir do que receber um objeto usando o sql-result-set-mapping -->